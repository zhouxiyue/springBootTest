war包：tomcat运行
spring再简化：springBoot-jar 内嵌tomcat
springCloud微服务

springboot
1.是什么
2.配置如何编写yaml
3.自动装配原理
4.集成web开发
5.集成数据库druid
6.分布式开发dubbo（rpc）+zookeeper
7.swagger接口文档
8.任务调度
9.springSecurity，shiro

springcloud
1.微服务
2.springcloud入门
3.restFul风格（接口）
4.eureka（服务注册与发现）
5.ribbon负载均衡（nginx）
6.feign
7.Hystrix容灾
8.zuul路由网关
9.springcloud config：git

spring
为了解决企业级应用开发的复杂性而创建的，简化开发
1.基于pojo轻量级和最小侵入编程
2.IOC DI面向接口实现松耦合
3.AOP切面和惯例进行声明式编程
4.通过切面和模板减少样式代码

springboot
javaweb开发框架，和springmvc类似，简化开发，约定大于配置，只需要配置很少的spring配置
集成了大量常用的第三方库配置（redis，mongodb，jpa，rabbitmq，quartz等等，几乎0配置，开箱即用）

环境配置
jdk1.8
maven3.6.1
springboot最新版
idea

快速创建项目
https://start.spring.io/

原理初探

pom.xml
1.spring-boot-dependencies:核心依赖在父工程中
2.引入依赖的时候不需要指定版本，因为有版本仓库

启动器
<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
</dependency>
springboot的启动场景
比如spring-boot-starter-web，会自动导入web环境所有的依赖
springboot会将所有的功能场景，变成一个一个的启动器
我们需要使用什么功能，只需要找到对应的启动器（~starter）即可

@SpringBootApplication
public class Demo2Application {

    public static void main(String[] args) {
        SpringApplication.run(Demo2Application.class, args);
    }

}
	
@SpringBootConfiguration：springboot的配置
	@Configuration：spring配置类
	@Component：spring的一个组件

@EnableAutoConfiguration：自动配置
	@AutoConfigurationPackage
	@Import({AutoConfigurationImportSelector.class})




1.springboot在启动的时候从类路径下的META-INF/spring-factories中获取EnableAutoConfiguration指定的值
2.将这些值作为自动配置类导入容器，自动配置类就生效，进行自动配置工作，无需手动配置
3.j2ee的整体解决方案和自动配置都在springboot-autoconfiguration的jar包中
4.它将所有需要导入的组件以全类名的方式返回，这些组件会被添加到容器中
5.它会给容器中导入非常多的自动配置类（XXXAutoConfiguration）给容器中导入这个场景所需要的所有组件并配置好这些组件


 springApplication.run()
1.判断应用类型是普通项目还是web项目
2.查找并加载所有可用的初始化值，设置到initializers属性中
3.找出所有的应用程序监听器，设置到listeners属性中
4.推断平设置main方法的定义类，找到运行的主类


自动装配原理
1.springboot启动会加载大量的自动配置类
2.首先看我们需要的功能有没有在springboot默认写好的自动配置类当中
3.再看这个自动皮之类中到底配置了哪些组件（如果我们要用的组件在其中，我们就不需要手动配置了）
4.给容器中自动配置类添加组件的时候，会从properties类中获取某些属性，我们只组要在配置文件中指定这些属性的值即可
xxxAutoConfiguration：自动配置类
xxxProperties：封装配置文件中相关属性



